{"version":3,"file":"AlrdyAnimate.js","mappings":";;;;;;;;;;;AAAA;;;;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AACA,WAAW,UAAU;AACrB,WAAW,QAAQ;AACnB,WAAW,QAAQ,WAAW;AAC9B,WAAW,SAAS;AACpB,WAAW,SAAS;AACpB,aAAa,UAAU;AACvB;;AAEA,2CAA2C;AAC3C,oBAAoB;AACpB,kBAAkB;AAClB,iBAAiB;AACjB;AACA;AACA,4BAA4B;AAC5B,8BAA8B;AAC9B;AACA;AACA;AACA,qCAAqC;AACrC;AACA,8BAA8B;AAC9B,2BAA2B;AAC3B;AACA,8BAA8B;AAC9B;AACA,2CAA2C;AAC3C,kCAAkC;AAClC,6BAA6B;AAC7B;AACA,SAAS;AACT,QAAQ;AACR;AACA;AACA,uCAAuC;AACvC;AACA;AACA;AACA;AACA;AACA;AACA,EAAE,iEAAe,QAAQ;;;;;;UC7CzB;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA;WACA,yCAAyC,wCAAwC;WACjF;WACA;WACA;;;;;WCPA;;;;;WCAA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;;ACN+C;;AAEP;;AAExC;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,gCAAgC;AAChC;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA,0CAA0C,aAAa;;AAEvD;AACA;AACA;AACA,iEAAiE,2DAAQ;AACzE;AACA;AACA;AACA,cAAc;AACd;AACA;AACA;AACA;AACA;AACA,WAAW;AACX,SAAS;AACT;AACA,SAAS;AACT;;AAEA;AACA;AACA;AACA,GAAG;AACH,CAAC,E","sources":["webpack://alrdy-animations/./src/scss/AlrdyAnimate.scss?ffa4","webpack://alrdy-animations/./src/js/utils/throttle.js","webpack://alrdy-animations/webpack/bootstrap","webpack://alrdy-animations/webpack/runtime/define property getters","webpack://alrdy-animations/webpack/runtime/hasOwnProperty shorthand","webpack://alrdy-animations/webpack/runtime/make namespace object","webpack://alrdy-animations/./src/js/AlrdyAnimate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","/**\n * Creates a throttled function that only invokes `func` at most once per every `limit` milliseconds.\n * The throttled function comes with `leading` and `trailing` options to control when the function is invoked.\n *\n * @param {Function} func - The function to throttle.\n * @param {number} limit - The number of milliseconds to throttle invocations to.\n * @param {Object} [options={}] - The options object.\n * @param {boolean} [options.leading=true] - Specify invoking on the leading edge of the timeout.\n * @param {boolean} [options.trailing=true] - Specify invoking on the trailing edge of the timeout.\n * @returns {Function} Returns the new throttled function.\n */\n\nfunction throttle(func, limit, options = {}) {\n    let inThrottle; // Flag to track if the function is currently throttled\n    let lastFunc; // Store the last function to be called after throttle ends\n    let lastRan; // Timestamp of the last function run\n  \n    return function() {\n      const context = this; // Store context for 'this' keyword\n      const args = arguments; // Store arguments to pass to the function\n  \n      if (!inThrottle) {\n        if (options.leading !== false) {\n          func.apply(context, args); // Call the function if leading is true\n        }\n        lastRan = Date.now(); // Set the last run timestamp\n        inThrottle = true; // Set the throttle flag\n        setTimeout(() => {\n          inThrottle = false; // Reset the throttle flag after the limit\n          if (options.trailing !== false && lastFunc) {\n            lastFunc.apply(context, args); // Call the function if trailing is true\n            lastRan = Date.now(); // Update the last run timestamp\n            lastFunc = null; // Clear the last function\n          }\n        }, limit);\n      } else {\n        lastFunc = function() {\n          if (!options.leading) {\n            func.apply(context, args); // Call the function if leading is false\n          }\n        };\n      }\n    };\n  }\n  \n  export default throttle;","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define getter functions for harmony exports\n__webpack_require__.d = (exports, definition) => {\n\tfor(var key in definition) {\n\t\tif(__webpack_require__.o(definition, key) && !__webpack_require__.o(exports, key)) {\n\t\t\tObject.defineProperty(exports, key, { enumerable: true, get: definition[key] });\n\t\t}\n\t}\n};","__webpack_require__.o = (obj, prop) => (Object.prototype.hasOwnProperty.call(obj, prop))","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import styles from '../scss/AlrdyAnimate.scss';\n\nimport throttle from './utils/throttle';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n  const isMobile = window.innerWidth < 768;\n\n  // Observers map to handle unique viewport percentages\n  const observersMap = {};\n\n  // Get all the elements with the aa attribute\n  const allAnimatedElements = document.querySelectorAll('[aa-animate]');\n\n  allAnimatedElements.forEach(element => {\n    const aaMobile = element.getAttribute('aa-mobile');\n    const viewportPercentageAttr = element.getAttribute('aa-viewport');\n    let viewportPercentage = viewportPercentageAttr ? parseFloat(viewportPercentageAttr) : 0.8;\n    let delay = element.getAttribute('aa-delay');\n\n    if (isMobile) {\n      if (aaMobile && aaMobile === 'no-delay') {\n        delay = null;\n      }\n      viewportPercentage = 0.8; // Default to 80% on mobile\n    }\n\n    if (delay) {\n      element.style.animationDelay = delay;\n    }\n\n    if (!isNaN(viewportPercentage) && viewportPercentage >= 0 && viewportPercentage <= 1) {\n      // Calculate rootMargin based on the viewport percentage\n      const bottomMargin = (1 - viewportPercentage) * 100;\n      const rootMarginValue = `0px 0px -${bottomMargin}% 0px`;\n\n      // Check if an observer for this root margin already exists\n      if (!observersMap[rootMarginValue]) {\n        // Create a new observer with the specific root margin\n        observersMap[rootMarginValue] = new IntersectionObserver(throttle((entries, observer) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting) {\n              entry.target.classList.add('in-view');\n            } else {\n              const rect = entry.target.getBoundingClientRect();\n              if (rect.top >= window.innerHeight) {\n                entry.target.classList.remove('in-view');\n              }\n            }\n          });\n        }, 100), {\n          rootMargin: rootMarginValue\n        });\n      }\n\n      // Add the element to the appropriate observer\n      observersMap[rootMarginValue].observe(element);\n    }\n  });\n});"],"names":[],"sourceRoot":""}