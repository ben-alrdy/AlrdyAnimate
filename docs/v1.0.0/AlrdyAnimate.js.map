{"version":3,"file":"AlrdyAnimate.js","mappings":"CAAA,SAA2CA,EAAMC,GAC1B,iBAAZC,SAA0C,iBAAXC,OACxCA,OAAOD,QAAUD,IACQ,mBAAXG,QAAyBA,OAAOC,IAC9CD,OAAO,GAAIH,GACe,iBAAZC,QACdA,QAAsB,aAAID,IAE1BD,EAAmB,aAAIC,GACxB,CATD,CASGK,MAAM,I,mBCRT,I,KCAwB,CAACJ,IACH,oBAAXK,QAA0BA,OAAOC,aAC1CC,OAAOC,eAAeR,EAASK,OAAOC,YAAa,CAAEG,MAAO,WAE7DF,OAAOC,eAAeR,EAAS,aAAc,CAAES,OAAO,GAAO,E,ICH9D,MAAMC,EAAiB,CACnBC,QAAS,iB,OASXC,OAAOC,aAAe,CAAEC,KANxB,SAAcC,EAAU,CAAC,GACvB,MAAMC,EAAW,IAAKN,KAAmBK,GACzCE,QAAQC,IAAIF,EAASL,QACvB,G","sources":["webpack://AlrdyAnimate/webpack/universalModuleDefinition","webpack://AlrdyAnimate/webpack/bootstrap","webpack://AlrdyAnimate/webpack/runtime/make namespace object","webpack://AlrdyAnimate/./src/js/AlrdyAnimate.js"],"sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"AlrdyAnimate\"] = factory();\n\telse\n\t\troot[\"AlrdyAnimate\"] = factory();\n})(this, () => {\nreturn ","// The require scope\nvar __webpack_require__ = {};\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import styles from \"../scss/AlrdyAnimate.scss\";\n\nconst defaultOptions = {\n    message: 'Hello, World!'\n  };\n\n  function init(options = {}) {\n    const settings = { ...defaultOptions, ...options };\n    console.log(settings.message);\n  }\n\n  // Attach to global namespace\n  window.AlrdyAnimate = { init };\n\n/*\nconst defaultOptions = {\n  easing: 'ease'\n};\n\nfunction init(options = {}) {\n  const settings = { ...defaultOptions, ...options };\n  \n  document.body.setAttribute(\"aa-easing\", settings.easing);\n\n  document.addEventListener(\"DOMContentLoaded\", () => {\n    const isMobile = window.innerWidth < 768;\n    const allAnimatedElements = document.querySelectorAll(\"[aa-animate], [aa-transition]\");\n\n    // Fallback for browsers without CSS variables support\n    if (!window.CSS || !window.CSS.supports || !window.CSS.supports('--a', '0')) {\n      allAnimatedElements.forEach((element) => {\n        const duration = element.getAttribute(\"aa-duration\") || '1s';\n        const delay = element.getAttribute(\"aa-delay\") || '0s';\n        element.style.animationDuration = duration;\n        element.style.animationDelay = delay;\n      });\n    }\n\n    // Fallback for browsers that do not support IntersectionObserver\n    if (!('IntersectionObserver' in window)) {\n      allAnimatedElements.forEach((element) => {\n        element.classList.add(\"in-view\");\n      });\n      return; // Exit the script as the fallback is applied\n    }\n\n    // Intersection Observer setup for supported browsers\n    allAnimatedElements.forEach((element) => {\n      const aaMobile = element.getAttribute(\"aa-mobile\");\n      const duration = element.getAttribute(\"aa-duration\");\n      const delay = element.getAttribute(\"aa-delay\");\n      const colorInitial = element.getAttribute(\"aa-color-initial\");\n      const colorFinal = element.getAttribute(\"aa-color-final\");\n      const anchorSelector = element.getAttribute(\"aa-anchor\");\n      let anchorElement = element;\n\n      // Set animation duration and delay based on attributes\n      if (duration) {\n        element.style.setProperty(\"--animation-duration\", duration);\n      }\n\n      if (isMobile && aaMobile === \"no-delay\") {\n        element.style.setProperty(\"--animation-delay\", \"0s\");\n      } else if (delay) {\n        element.style.setProperty(\"--animation-delay\", delay);\n      }\n\n      // Set background colors based on attributes\n      if (colorInitial) {\n        element.style.setProperty(\"--background-color-initial\", colorInitial);\n      }\n      if (colorFinal) {\n        element.style.setProperty(\"--background-color-final\", colorFinal);\n      }\n\n      // Use the anchor element if specified\n      if (anchorSelector) {\n        anchorElement = document.querySelector(anchorSelector);\n      }\n\n      const viewportPercentageAttr = element.getAttribute(\"aa-viewport\");\n      let viewportPercentage = viewportPercentageAttr\n        ? parseFloat(viewportPercentageAttr)\n        : 0.8;\n\n      if (\n        !isNaN(viewportPercentage) &&\n        viewportPercentage >= 0 &&\n        viewportPercentage <= 1\n      ) {\n        const bottomMargin = (1 - viewportPercentage) * 100;\n        const rootMarginValue = `0px 0px -${bottomMargin}% 0px`;\n\n        // Observer to add 'in-view' class\n        const addObserver = new IntersectionObserver(\n          (entries) => {\n            entries.forEach((entry) => {\n              if (entry.isIntersecting) {\n                element.classList.add(\"in-view\");\n              }\n            });\n          },\n          {\n            threshold: [0, 1],\n            rootMargin: rootMarginValue,\n          }\n        );\n\n        // Observer to remove 'in-view' class and add 'out-of-view' class\n        const removeObserver = new IntersectionObserver(\n          (entries) => {\n            entries.forEach((entry) => {\n              const rect = entry.target.getBoundingClientRect();\n              if (!entry.isIntersecting && rect.top >= window.innerHeight) {\n                element.classList.remove(\"in-view\");\n              }\n            });\n          },\n          {\n            threshold: 0,\n            rootMargin: \"0px\",\n          }\n        );\n\n        addObserver.observe(anchorElement);\n        removeObserver.observe(anchorElement);\n      }\n    });\n  });\n}\n\nconst AlrdyAnimate = { init };\nexport default AlrdyAnimate;\n\n// Attach to global namespace if needed\nwindow.AlrdyAnimate = AlrdyAnimate;\n\n*/"],"names":["root","factory","exports","module","define","amd","this","Symbol","toStringTag","Object","defineProperty","value","defaultOptions","message","window","AlrdyAnimate","init","options","settings","console","log"],"sourceRoot":""}