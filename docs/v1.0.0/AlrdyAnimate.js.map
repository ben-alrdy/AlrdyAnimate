{"version":3,"file":"AlrdyAnimate.js","mappings":";;;;;;;;;;;AAAA;;;;;;;UCAA;UACA;;UAEA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;UACA;;UAEA;UACA;;UAEA;UACA;UACA;;;;;WCtBA;WACA;WACA;WACA,uDAAuD,iBAAiB;WACxE;WACA,gDAAgD,aAAa;WAC7D;;;;;;;;;;ACN+C;;AAE/C;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,4CAA4C,aAAa;AACzD;AACA;AACA;AACA;AACA;AACA;AACA,sDAAsD,gBAAgB;AACtE;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA,0DAA0D,gBAAgB;AAC1E;AACA,WAAW;AACX,SAAS;AACT;AACA;AACA,SAAS;AACT;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,KAAK;AACL,GAAG,E","sources":["webpack://alrdy-animations/./src/scss/AlrdyAnimate.scss?ffa4","webpack://alrdy-animations/webpack/bootstrap","webpack://alrdy-animations/webpack/runtime/make namespace object","webpack://alrdy-animations/./src/js/AlrdyAnimate.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport {};","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// define __esModule on exports\n__webpack_require__.r = (exports) => {\n\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n\t}\n\tObject.defineProperty(exports, '__esModule', { value: true });\n};","import styles from '../scss/AlrdyAnimate.scss';\n\n// import throttle from './utils/throttle';\n\ndocument.addEventListener(\"DOMContentLoaded\", () => {\n    const allAnimatedElements = document.querySelectorAll('[aa-animate]');\n  \n    allAnimatedElements.forEach(element => {\n      const viewportPercentageAttr = element.getAttribute('aa-viewport');\n      let viewportPercentage = viewportPercentageAttr ? parseFloat(viewportPercentageAttr) : 0.8;\n  \n      if (!isNaN(viewportPercentage) && viewportPercentage >= 0 && viewportPercentage <= 1) {\n        // Calculate rootMargin based on the viewport percentage for the primary observer\n        const bottomMargin = (1 - viewportPercentage) * 100;\n        const rootMarginValue = `0px 0px -${bottomMargin}% 0px`;\n  \n        // Primary observer to add 'in-view' class\n        const addObserver = new IntersectionObserver((entries) => {\n          entries.forEach(entry => {\n            if (entry.isIntersecting) {\n              entry.target.classList.add('in-view');\n              console.log(`Added 'in-view' class to ${entry.target.id}`);\n            }\n          });\n        }, {\n          threshold: [0, 1], // Trigger callback when any part or the whole element is visible\n          rootMargin: rootMarginValue\n        });\n  \n        // Secondary observer to remove 'in-view' class when moving out of the viewport from the bottom\n        const removeObserver = new IntersectionObserver((entries) => {\n          entries.forEach(entry => {\n            const rect = entry.target.getBoundingClientRect();\n            if (!entry.isIntersecting && rect.top >= window.innerHeight) {\n              entry.target.classList.remove('in-view');\n              console.log(`Removed 'in-view' class from ${entry.target.id}`);\n            }\n          });\n        }, {\n          threshold: 0, // Trigger callback when the element is not visible at all\n          rootMargin: '0px' // Ensure this observer uses the full viewport\n        });\n  \n        const delay = element.getAttribute('aa-delay');\n        if (delay) {\n          element.style.animationDelay = delay;\n        }\n  \n        addObserver.observe(element);\n        removeObserver.observe(element);\n      }\n    });\n  });"],"names":[],"sourceRoot":""}