(()=>{"use strict";const t={easing:"ease"},e={init:function(e={}){const o={...t,...e};document.body.setAttribute("aa-easing",o.easing);const n=window.innerWidth<768;document.querySelectorAll("[aa-animate], [aa-transition]").forEach((t=>{const e=t.getAttribute("aa-mobile"),o=t.getAttribute("aa-duration"),i=t.getAttribute("aa-delay"),r=t.getAttribute("aa-color-initial"),a=t.getAttribute("aa-color-final"),s=t.getAttribute("aa-anchor");let l=t;o&&t.style.setProperty("--animation-duration",o),n&&"no-delay"===e?t.style.setProperty("--animation-delay","0s"):i&&t.style.setProperty("--animation-delay",i),r&&t.style.setProperty("--background-color-initial",r),a&&t.style.setProperty("--background-color-final",a),s&&(l=document.querySelector(s));const c=t.getAttribute("aa-viewport");let g=c?parseFloat(c):.8;if(!isNaN(g)&&g>=0&&g<=1){const t=new IntersectionObserver((t=>{t.forEach((t=>{console.log("Entry observed for adding in-view:",t),t.isIntersecting&&(console.log("Adding in-view class to element:",t.target),t.target.classList.add("in-view"))}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-g)}% 0px`}),e=new IntersectionObserver((t=>{t.forEach((t=>{const e=t.target.getBoundingClientRect();console.log("Entry observed for removing in-view:",t),!t.isIntersecting&&e.top>=window.innerHeight&&(console.log("Removing in-view class from element:",t.target),t.target.classList.remove("in-view"))}))}),{threshold:0,rootMargin:"0px"});t.observe(l),e.observe(l)}}))}};window.AlrdyAnimate=e})();