(()=>{"use strict";const t={easing:"ease",again:!0,viewportPercentage:.8},e={init:function(e={}){const i={...t,...e},a=document.querySelectorAll("[aa-animate], [aa-transition]"),n=window.innerWidth<768;"IntersectionObserver"in window?(document.body.setAttribute("aa-easing",i.easing),a.forEach((t=>{const a=t.getAttribute("aa-mobile"),r=t.getAttribute("aa-duration")||e.duration,o=t.getAttribute("aa-delay")||e.delay,s=t.getAttribute("aa-color-initial"),c=t.getAttribute("aa-color-final"),l=t.getAttribute("aa-anchor");let d=t;l&&(d=document.querySelector(l)),r&&t.style.setProperty("--animation-duration",r),o&&t.style.setProperty("--animation-delay",o),n&&"no-delay"===a&&t.style.setProperty("--animation-delay","0s"),s&&t.style.setProperty("--background-color-initial",s),c&&t.style.setProperty("--background-color-final",c);const g=t.getAttribute("aa-viewport");let u=g?parseFloat(g):i.viewportPercentage;if(u>=0&&u<=1){const e=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&t.classList.add("in-view")}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-u)}% 0px`}),a=new IntersectionObserver((e=>{e.forEach((e=>{const a=e.target.getBoundingClientRect();!e.isIntersecting&&a.top>=window.innerHeight&&(i.again||l)&&t.classList.remove("in-view")}))}),{threshold:0,rootMargin:"0px"});e.observe(d),a.observe(d)}}))):a.forEach((t=>{t.classList.add("in-view")}))}};window.AlrdyAnimate=e})();