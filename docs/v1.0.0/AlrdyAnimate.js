(()=>{"use strict";document.addEventListener("DOMContentLoaded",(()=>{const t=window.innerWidth<768,e=document.querySelectorAll("[aa-animate], [aa-transition]");window.CSS&&window.CSS.supports&&window.CSS.supports("--a","0")||e.forEach((t=>{const e=t.getAttribute("aa-duration")||"1s",a=t.getAttribute("aa-delay")||"0s";t.style.animationDuration=e,t.style.animationDelay=a})),"IntersectionObserver"in window?e.forEach((e=>{const a=e.getAttribute("aa-mobile"),i=e.getAttribute("aa-duration"),o=e.getAttribute("aa-delay"),n=e.getAttribute("aa-color-initial"),r=e.getAttribute("aa-color-final"),s=e.getAttribute("aa-anchor");let l=e;i&&e.style.setProperty("--animation-duration",i),t&&"no-delay"===a?e.style.setProperty("--animation-delay","0s"):o&&e.style.setProperty("--animation-delay",o),n&&e.style.setProperty("--background-color-initial",n),r&&e.style.setProperty("--background-color-final",r),s&&(l=document.querySelector(s));const c=e.getAttribute("aa-viewport");let d=c?parseFloat(c):.8;if(!isNaN(d)&&d>=0&&d<=1){const t=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&e.classList.add("in-view")}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-d)}% 0px`}),a=new IntersectionObserver((t=>{t.forEach((t=>{const a=t.target.getBoundingClientRect();!t.isIntersecting&&a.top>=window.innerHeight&&e.classList.remove("in-view")}))}),{threshold:0,rootMargin:"0px"});t.observe(l),a.observe(l)}})):e.forEach((t=>{t.classList.add("in-view")}))}))})();
//# sourceMappingURL=AlrdyAnimate.js.map