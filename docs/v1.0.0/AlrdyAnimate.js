(()=>{"use strict";const t={easing:"ease",again:!0,viewportPercentage:.8,duration:"1s",delay:"0s"},e={init:function(e={}){const i={...t,...e},a=document.querySelectorAll("[aa-animate], [aa-transition]"),n=window.innerWidth<768;"IntersectionObserver"in window?(document.body.setAttribute("aa-easing",i.easing),a.forEach((t=>{const e=t.getAttribute("aa-mobile"),a=t.getAttribute("aa-duration")||i.duration,r=t.getAttribute("aa-delay")||i.delay,o=t.getAttribute("aa-color-initial"),s=t.getAttribute("aa-color-final"),c=t.getAttribute("aa-anchor");let l=t;c&&(l=document.querySelector(c)),t.style.setProperty("--animation-duration",a),n&&"no-delay"===e?t.style.setProperty("--animation-delay","0s"):t.style.setProperty("--animation-delay",r),o&&t.style.setProperty("--background-color-initial",o),s&&t.style.setProperty("--background-color-final",s);const d=t.getAttribute("aa-viewport");let g=d?parseFloat(d):i.viewportPercentage;if(g>=0&&g<=1){const e=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&t.classList.add("in-view")}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-g)}% 0px`}),a=new IntersectionObserver((e=>{e.forEach((e=>{const a=e.target.getBoundingClientRect();!e.isIntersecting&&a.top>=window.innerHeight&&(i.again||c)&&t.classList.remove("in-view")}))}),{threshold:0,rootMargin:"0px"});e.observe(l),a.observe(l)}}))):a.forEach((t=>{t.classList.add("in-view")}))}};window.AlrdyAnimate=e})();