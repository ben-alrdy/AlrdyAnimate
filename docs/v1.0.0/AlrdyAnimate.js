(()=>{"use strict";const e={easing:"ease"},t={init:function(t={}){const o={...e,...t};document.body.setAttribute("aa-easing",o.easing);const n=window.innerWidth<768,i=document.querySelectorAll("[aa-animate], [aa-transition]");"IntersectionObserver"in window?i.forEach((e=>{const t=e.getAttribute("aa-mobile"),o=e.getAttribute("aa-duration"),i=e.getAttribute("aa-delay"),r=e.getAttribute("aa-color-initial"),a=e.getAttribute("aa-color-final"),s=e.getAttribute("aa-anchor");let l=e;o&&e.style.setProperty("--animation-duration",o),n&&"no-delay"===t?e.style.setProperty("--animation-delay","0s"):i&&e.style.setProperty("--animation-delay",i),r&&e.style.setProperty("--background-color-initial",r),a&&e.style.setProperty("--background-color-final",a),s&&(l=document.querySelector(s));const c=e.getAttribute("aa-viewport");let g=c?parseFloat(c):.8;if(!isNaN(g)&&g>=0&&g<=1){const e=new IntersectionObserver((e=>{e.forEach((e=>{console.log("Entry observed for adding in-view:",e),e.isIntersecting&&(console.log("Adding in-view class to element:",e.target),e.target.classList.add("in-view"))}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-g)}% 0px`}),t=new IntersectionObserver((e=>{e.forEach((e=>{const t=e.target.getBoundingClientRect();console.log("Entry observed for removing in-view:",e),!e.isIntersecting&&t.top>=window.innerHeight&&(console.log("Removing in-view class from element:",e.target),e.target.classList.remove("in-view"))}))}),{threshold:0,rootMargin:"0px"});e.observe(l),t.observe(l)}})):i.forEach((e=>{e.classList.add("in-view")}))}};window.AlrdyAnimate=t})();