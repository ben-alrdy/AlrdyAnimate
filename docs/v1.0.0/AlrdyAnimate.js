(()=>{"use strict";const e={easing:"ease",again:!0,viewportPercentage:.8,duration:"1s",delay:"0s"},t={init:function(t={}){const o={...e,...t},i=document.querySelectorAll("[aa-animate], [aa-transition]"),n=window.innerWidth<768;"IntersectionObserver"in window?(document.body.setAttribute("aa-easing",o.easing),i.forEach((e=>{const t=e.getAttribute("aa-mobile"),i=e.getAttribute("aa-duration")||o.duration,a=e.getAttribute("aa-delay")||o.delay,r=e.getAttribute("aa-color-initial"),s=e.getAttribute("aa-color-final"),l=e.getAttribute("aa-anchor");let c=e;l&&(c=document.querySelector(l)),e.style.setProperty("--animation-duration",i),n&&"no-delay"===t?e.style.setProperty("--animation-delay","0s"):e.style.setProperty("--animation-delay",a),r&&e.style.setProperty("--background-color-initial",r),s&&e.style.setProperty("--background-color-final",s);const d=e.getAttribute("aa-viewport");let g=d?parseFloat(d):o.viewportPercentage;if(g>=0&&g<=1){const e=new IntersectionObserver((e=>{e.forEach((e=>{e.isIntersecting&&(e.target.classList.add("in-view"),l&&(console.log(`Anchor in view: ${l}`),console.log("Added in-view:",e.target)))}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-g)}% 0px`}),t=new IntersectionObserver((e=>{e.forEach((e=>{const t=e.target.getBoundingClientRect();!e.isIntersecting&&t.top>=window.innerHeight&&(o.again||l)&&(e.target.classList.remove("in-view"),l&&(console.log(`Anchor out of view: ${l}`),console.log("Removed in-view:",e.target)))}))}),{threshold:0,rootMargin:"0px"});e.observe(c),t.observe(c)}}))):i.forEach((e=>{e.classList.add("in-view")}))}};window.AlrdyAnimate=t})();