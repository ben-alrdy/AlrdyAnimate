(()=>{"use strict";const t={easing:"ease",again:!0,viewportPercentage:.8,duration:"1s",delay:"0s"},e={init:function(e={}){const a={...t,...e},o=document.querySelectorAll("[aa-animate], [aa-transition]"),i=window.innerWidth<768;"IntersectionObserver"in window?(document.body.setAttribute("aa-easing",a.easing),o.forEach((t=>{const e=t.getAttribute("aa-mobile"),o=t.getAttribute("aa-duration")||a.duration,n=t.getAttribute("aa-delay")||a.delay,r=t.getAttribute("aa-color-initial"),s=t.getAttribute("aa-color-final"),l=t.getAttribute("aa-anchor");let c=t;l&&(c=document.querySelector(l),console.log(l)),t.style.setProperty("--animation-duration",o),i&&"no-delay"===e?t.style.setProperty("--animation-delay","0s"):t.style.setProperty("--animation-delay",n),r&&t.style.setProperty("--background-color-initial",r),s&&t.style.setProperty("--background-color-final",s);const d=t.getAttribute("aa-viewport");let g=d?parseFloat(d):a.viewportPercentage;if(g>=0&&g<=1){const t=new IntersectionObserver((t=>{t.forEach((t=>{t.isIntersecting&&(t.target.classList.add("in-view"),console.log("add class:",t))}))}),{threshold:[0,1],rootMargin:`0px 0px -${100*(1-g)}% 0px`}),e=new IntersectionObserver((t=>{t.forEach((t=>{const e=t.target.getBoundingClientRect();!t.isIntersecting&&e.top>=window.innerHeight&&(a.again||l)&&(t.target.classList.remove("in-view"),console.log("remove class:",t))}))}),{threshold:0,rootMargin:"0px"});t.observe(c),e.observe(c)}}))):o.forEach((t=>{t.classList.add("in-view")}))}};window.AlrdyAnimate=e})();